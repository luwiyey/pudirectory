import { z } from 'zod';

const CourseSchema = z.object({
  name: z.string().min(1, 'Course name cannot be empty.'),
  credits: z.coerce.number().min(0, 'Credits must be a positive number.'),
});

const GradeSchema = z.object({
  courseName: z.string().min(1, 'Course name cannot be empty.'),
  grade: z.coerce.number().min(0, 'Grade must be between 0 and 100.').max(100, 'Grade must be between 0 and 100.'),
});

export const departments = [
    'ECOAST', 
    'Information Technology', 
    'Business Administration', 
    'Arts and Sciences', 
    'Engineering',
    'Computer Science',
    'Education Major in English',
    'Education Major in Filipino',
    'Education Major in Math'
] as const;
const DepartmentEnum = z.enum(departments);
export type Department = z.infer<typeof DepartmentEnum>;

export const StudentSchema = z.object({
  id: z.string(),
  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),
  email: z.string().email({ message: 'Please enter a valid email.' }).refine(
    (email) => email.endsWith('@panpacificu.edu.ph'),
    { message: 'Email must be a valid Panpacific University address.'}
  ),
  dateOfBirth: z.string().refine((val) => !isNaN(Date.parse(val)), { message: "Invalid date format" }).optional(),
  graduationDate: z.string().refine((val) => !isNaN(Date.parse(val)), { message: "Invalid date format" }).optional(),
  department: DepartmentEnum.optional(),
  currentCourses: z.array(CourseSchema).optional().default([]),
  grades: z.array(GradeSchema).optional().default([]),
  academicHistory: z.string().optional().default(''),
});

export type Student = z.infer<typeof StudentSchema>;

// Schema for importing students. 'id' is omitted as it will be generated by Firestore.
// All fields are optional to handle missing data gracefully as requested.
export const StudentImportSchema = z.array(
    StudentSchema.omit({ id: true }).partial().extend({
        name: z.string().min(2, { message: 'Imported student must have a name.' }),
        email: z.string().email({ message: 'Imported student must have a valid email.' }),
    })
);

export const AttendanceSchema = z.object({
    id: z.string(),
    studentId: z.string(),
    date: z.string().refine((val) => !isNaN(Date.parse(val)), { message: "Invalid date format" }),
    status: z.enum(['Present', 'Absent', 'Late', 'Excused']),
});

export type Attendance = z.infer<typeof AttendanceSchema>;


export const NoteSchema = z.object({
    id: z.string(),
    studentId: z.string(),
    authorEmail: z.string().email(),
    content: z.string().min(1, "Note cannot be empty."),
    createdAt: z.string(), // ISO string
});

export type Note = z.infer<typeof NoteSchema>;
